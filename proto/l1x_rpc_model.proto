syntax = "proto3";

package rpc_model;


service Node {
  rpc GetAccountState (GetAccountStateRequest) returns (GetAccountStateResponse);
  rpc SubmitTransaction (SubmitTransactionRequest) returns (stream SubmitTransactionResponse);
  rpc SubmitTransactionV2 (SubmitTransactionRequestV2) returns (stream SubmitTransactionResponse);
  rpc EstimateFee (EstimateFeeRequest) returns (EstimateFeeResponse);
  rpc GetTransactionReceipt (GetTransactionReceiptRequest) returns (GetTransactionReceiptResponse);
  rpc GetTransactionV3Receipt (GetTransactionReceiptRequest) returns (GetTransactionV3ReceiptResponse);
  rpc GetTransactionsByAccount (GetTransactionsByAccountRequest) returns (GetTransactionsByAccountResponse);
  rpc GetTransactionsV3ByAccount (GetTransactionsByAccountRequest) returns (GetTransactionsV3ByAccountResponse);
  rpc SmartContractReadOnlyCall(SmartContractReadOnlyCallRequest) returns (SmartContractReadOnlyCallResponse);
  rpc GetChainState (GetChainStateRequest) returns (GetChainStateResponse);
  rpc GetLatestBlocks (GetLatestBlocksRequest) returns (GetLatestBlocksResponse);
  rpc GetLatestSnapshot (GetLatestSnapshotRequest) returns (stream GetLatestSnapshotResponse);
  rpc GetSnapshotRange (GetSnapshotRangeRequest) returns (GetSnapshotRangeResponse);
  rpc GetProtocolVersion (GetProtocolVersionRequest) returns (GetProtocolVersionResponse);
  rpc GetBlockByNumber (GetBlockByNumberRequest) returns (GetBlockByNumberResponse);
  rpc GetBlockV2ByNumber (GetBlockByNumberRequest) returns (GetBlockV2ByNumberResponse);
  rpc GetBlockV3ByNumber (GetBlockByNumberRequest) returns (GetBlockV3ByNumberResponse);
  rpc GetStake(GetStakeRequest) returns (GetStakeResponse);
  rpc GetCurrentNonce(GetCurrentNonceRequest) returns (GetCurrentNonceResponse);
  rpc GetEvents(GetEventsRequest) returns (stream GetEventsResponse);
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  rpc ImportAccount(ImportAccountRequest) returns (ImportAccountResponse);
  rpc GetNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse);
  rpc GetGenesisBlock (GetGenesisBlockRequest) returns (GetGenesisBlockResponse);
  rpc GetCurrentNodeInfo (GetCurrentNodeInfoRequest) returns (GetCurrentNodeInfoResponse);
  rpc GetNodeHealths (GetNodeHealthsRequest) returns (GetNodeHealthsResponse);
  rpc GetBlockProposerForEpoch (GetBpForEpochRequest) returns (GetBpForEpochResponse);
  rpc GetValidatorsForEpoch (GetValidatorsForEpochRequest) returns (GetValidatorsForEpochResponse);
  rpc GetRuntimeStakingInfo (GetRuntimeStakingInfoRequest) returns (GetRuntimeStakingInfoResponse);
  rpc GetRuntimeConfig (GetRuntimeConfigRequest) returns (GetRuntimeConfigResponse);
}

// Account
message AccountState {
  string balance = 1;
  string nonce = 2;
  AccountType account_type = 3;
}

enum AccountType {
  SYSTEM = 0;
  USER = 1;
}

message GetAccountStateRequest {
  string address = 1;
}

message GetAccountStateResponse {
  AccountState account_state = 1;
}

// Transaction
message NativeTokenTransfer {
  bytes address = 1;
  string amount = 2;
}

message SmartContractDeployment {
  AccessType access_type = 1;
  ContractType contract_type = 2;
  bytes contract_code = 3;
  uint64 value = 4;
  bytes salt = 5;
}

message SmartContractInit {
  bytes address = 1;
  bytes arguments = 2;
}

message SmartContractFunctionCall {
  bytes contract_address = 1;
  bytes function_name = 2;
  bytes arguments = 3;
}

message SmartContractDeploymentV2 {
  AccessType access_type = 1;
  ContractType contract_type = 2;
  bytes contract_code = 3;
  string deposit = 4;
  bytes salt = 5;
}

message SmartContractInitV2 {
  bytes contract_code_address = 1;
  bytes arguments = 2;
  string deposit = 3;
}

message SmartContractFunctionCallV2 {
  bytes contract_instance_address = 1;
  bytes function_name = 2;
  bytes arguments = 3;
  string deposit = 4;
}

message CreateStakingPool {
  optional bytes contract_instance_address = 1;
  optional string min_stake = 2;
  optional string max_stake = 3;
  optional string min_pool_balance = 4;
  optional string max_pool_balance = 5;
  optional string staking_period = 6;
}

message Stake {
  bytes pool_address = 1;
  string amount = 2;
}

message UnStake {
  bytes pool_address = 1;
  string amount = 2;
}

message GetCurrentNonceRequest {
  string address = 1;
}

message GetCurrentNonceResponse {
  string nonce = 1;
}

message GetEventsRequest {
  string tx_hash = 1;
  uint64 timestamp = 2;
}

message GetEventsResponse {
  repeated bytes events_data = 1;
}

// Protocol version request
message GetProtocolVersionRequest {
}

// Protocol version response
message GetProtocolVersionResponse {
  uint32 protocol_version = 1;
}

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_NATIVE_TOKEN_TRANSFER = 1;
  TRANSACTION_TYPE_SMART_CONTRACT_DEPLOYMENT = 2;
  TRANSACTION_TYPE_SMART_CONTRACT_INSTANTIATION = 3;
  TRANSACTION_TYPE_SMART_CONTRACT_FUNCTION_CALL = 4;
  TRANSACTION_TYPE_STAKE = 5;
  TRANSACTION_TYPE_UNSTAKE = 6;
}

enum AccessType {
    PRIVATE = 0;
    PUBLIC = 1;
    RESTICTED = 2;
}

enum ContractType {
  L1XVM = 0;
  EVM = 1;
  XTALK = 2;
}

enum TransactionStatus {
  TRANSACTION_STATUS_SUCCEED = 0;
  TRANSACTION_STATUS_FAILED = 1;
}

enum TransactionVersion {
  TRANSACTION_VERSION_V1 = 0;
  TRANSACTION_VERSION_V2 = 1;
  TRANSACTION_VERSION_V3 = 2;
}

message Transaction {
  TransactionType tx_type = 1;
  oneof transaction {
    NativeTokenTransfer native_token_transfer = 2;
    SmartContractDeployment smart_contract_deployment = 3;
    SmartContractInit smart_contract_init = 4;
    SmartContractFunctionCall smart_contract_function_call = 5;
    Stake stake = 6;
    UnStake unstake = 7;
  }
  string nonce = 8;
  string fee_limit = 9;
  bytes signature = 10;
  bytes verifying_key = 11;
}

message TransactionV2 {
  TransactionType tx_type = 1;
  oneof transaction {
    NativeTokenTransfer native_token_transfer = 2;
    SmartContractDeployment smart_contract_deployment = 3;
    SmartContractInit smart_contract_init = 4;
    SmartContractFunctionCall smart_contract_function_call = 5;
    Stake stake = 6;
    UnStake unstake = 7;
  }
  string nonce = 8;
  string fee_limit = 9;
  bytes signature = 10;
  bytes verifying_key = 11;
  optional bytes eth_original_transaction = 12;
}

message TransactionV3 {
  TransactionVersion version = 1;
  TransactionType tx_type = 2;
  oneof transaction {
    NativeTokenTransfer native_token_transfer = 3;
    SmartContractDeploymentV2 smart_contract_deployment = 4;
    SmartContractInitV2 smart_contract_init = 5;
    SmartContractFunctionCallV2 smart_contract_function_call = 6;
    Stake stake = 7;
    UnStake unstake = 8;
  }
  string nonce = 9;
  string fee_limit = 10;
  bytes signature = 11;
  bytes verifying_key = 12;
  optional bytes eth_original_transaction = 13;
}

// Used when submitting a transaction
message SubmitTransactionRequest {
  string nonce = 1;
  oneof transaction_type {
    NativeTokenTransfer native_token_transfer = 2;
    SmartContractDeployment smart_contract_deployment = 3;
    SmartContractInit smart_contract_init = 4;
    SmartContractFunctionCall smart_contract_function_call = 5;
    CreateStakingPool create_staking_pool = 9;
    Stake stake = 10;
    UnStake unstake = 11;
  }
  string fee_limit = 12;
  bytes signature = 13;
  bytes verifying_key = 14;
}

// Used when submitting a transaction
message SubmitTransactionRequestV2 {
  string nonce = 1;
  oneof transaction_type {
    NativeTokenTransfer native_token_transfer = 2;
    SmartContractDeploymentV2 smart_contract_deployment = 3;
    SmartContractInitV2 smart_contract_init = 4;
    SmartContractFunctionCallV2 smart_contract_function_call = 5;
    CreateStakingPool create_staking_pool = 9;
    Stake stake = 10;
    UnStake unstake = 11;
  }
  string fee_limit = 12;
  bytes signature = 13;
  bytes verifying_key = 14;
}

message SubmitTransactionResponse {
  string hash = 1;
  optional string contract_address = 2; // deployed or instantiated contract address
}

message EstimateFeeRequest {
  string fee_limit = 1;
  oneof transaction_type {
    NativeTokenTransfer native_token_transfer = 2;
    SmartContractDeploymentV2 smart_contract_deployment = 3;
    SmartContractInitV2 smart_contract_init = 4;
    SmartContractFunctionCallV2 smart_contract_function_call = 5;
    CreateStakingPool create_staking_pool = 9;
    Stake stake = 10;
    UnStake unstake = 11;
  }
  bytes verifying_key = 12;
}

message EstimateFeeResponse {
  string fee = 1;
}

// Transaction receipt
message GetTransactionReceiptRequest {
  string hash = 1;
}

message GetTransactionReceiptResponse {
  TransactionResponse transaction = 1;
  TransactionStatus status = 2;
}

message GetTransactionV3ReceiptResponse {
  TransactionV3Response transaction = 1;
  TransactionStatus status = 2;
}

// Transactions list
message GetTransactionsByAccountRequest {
  string address = 1;
  uint32 number_of_transactions = 2; // Returns last number_of_transactions
  uint32 starting_from = 3; // Starting from index if specified
}

message GetTransactionsByAccountResponse {
  repeated TransactionResponse transactions = 1;
}

message GetTransactionsV3ByAccountResponse {
  repeated TransactionV3Response transactions = 1;
}

// Chain state
message GetChainStateRequest {
}

message GetChainStateResponse {
  string cluster_address = 1;
  string head_block_number = 2;
  string head_block_hash = 3;
}

// Latest block request used by node syncing process
message GetLatestBlocksRequest {
}

// Latest blocks response used by node syncing process
message GetLatestBlocksResponse {
  string cluster_address = 1;
  string head_block_number = 2;
  string head_block_hash = 3;
  string last_executed_block = 4;
}

// Snapshot request used by full_node while syncing snapshot
message GetLatestSnapshotRequest {
}

// Snapshot available in archive node
message GetLatestSnapshotResponse {
  uint32 version = 1;
  string format = 2;
  bytes data = 3;
}

// Snapshot block range available in archive node
message GetSnapshotRangeRequest {
}

// Snapshot's block height(highest block stored by snapshot) available in archive node
message GetSnapshotRangeResponse {
  string highest_block = 1;
}

// Block
message Block {
  string number = 1;
  string hash = 2;
  string parent_hash = 3;
  uint64 timestamp = 4;
  repeated TransactionResponse transactions = 5;
  BlockType block_type = 6;
  string cluster_address = 7;
}

// Block
message BlockV2 {
  string number = 1;
  string hash = 2;
  string parent_hash = 3;
  uint64 timestamp = 4;
  repeated TransactionV2Response transactions = 5;
  BlockType block_type = 6;
  string cluster_address = 7;
}

message BlockV3 {
  string number = 1;
  string hash = 2;
  string parent_hash = 3;
  uint64 timestamp = 4;
  repeated TransactionV3Response transactions = 5;
  BlockType block_type = 6;
  string cluster_address = 7;
  string state_hash = 8;
  string block_version = 9;
  string epoch = 10;
}


message BlockHeader {
  uint64 block_number = 1;
  string block_hash = 2;
  string parent_hash = 3;
  uint64 timestamp = 4;
  BlockType block_type = 5;
  string cluster_address = 6;
  uint32 num_transactions = 7;
}

message BlockHeaderV3 {
  uint64 block_number = 1;
  string block_hash = 2;
  string parent_hash = 3;
  uint64 timestamp = 4;
  BlockType block_type = 5;
  string cluster_address = 6;
  uint32 num_transactions = 7;
  string state_hash = 8;
  string block_version = 9;
  string epoch = 10;
}


enum BlockType {
  BLOCK_TYPE_UNSPECIFIED = 0;
  BLOCK_TYPE_L1X_TOKEN_BLOCK = 1;
  BLOCK_TYPE_L1X_CONTRACT_BLOCK = 2;
  BLOCK_TYPE_XTALK_BLOCK = 3;
  BLOCK_TYPE_SUPER_BLOCK = 4;
  BLOCK_TYPE_SYSTEM_BLOCK = 5;
}

message GetBlockByNumberRequest {
  string block_number = 1;
}

message GetBlockByNumberResponse {
  Block block = 1;
}

message GetBlockV2ByNumberResponse {
  BlockV2 block = 1;
}

message GetBlockV3ByNumberResponse {
  BlockV3 block = 1;
}


message GetLatestBlockHeadersRequest {
  uint32 number_of_blocks = 1;
  uint32 blocks_per_page = 2;
}

message GetLatestBlockHeadersResponse {
  uint32 page_number = 1;
  repeated BlockHeader page = 2;
}

message GetLatestBlockHeadersRequestV3 {
  uint32 number_of_blocks = 1;
  uint32 blocks_per_page = 2;
}

message GetLatestBlockHeadersResponseV3 {
  uint32 page_number = 1;
  repeated BlockHeaderV3 page = 2;
}


message GetLatestTransactionsRequest {
  uint32 number_of_transactions = 1;
  uint32 transactions_per_page = 2;
}

message GetLatestTransactionsResponse {
  uint32 page_number = 1;
  repeated TransactionResponse page = 2; // Each page contains number_of_transactions transactions
}

message GetLatestTransactionsV3Response {
  uint32 page_number = 1;
  repeated TransactionV3Response page = 2; // Each page contains number_of_transactions transactions
}

message TransactionResponse {
  Transaction transaction = 1;
  bytes from = 2; // Potential "to" address is inside transaction if tx is of a type that has a "to" address
  bytes transaction_hash = 3;
  bytes block_hash = 4;
  int64 block_number = 5;
  string fee_used = 6;
  uint64 timestamp = 7;
}

message TransactionV2Response {
  TransactionV2 transaction = 1;
  bytes from = 2; // Potential "to" address is inside transaction if tx is of a type that has a "to" address
  bytes transaction_hash = 3;
  bytes block_hash = 4;
  int64 block_number = 5;
  string fee_used = 6;
  uint64 timestamp = 7;
}

message TransactionV3Response {
  TransactionV3 transaction = 1;
  bytes from = 2; // Potential "to" address is inside transaction if tx is of a type that has a "to" address
  bytes transaction_hash = 3;
  bytes block_hash = 4;
  int64 block_number = 5;
  string fee_used = 6;
  uint64 timestamp = 7;
}

// Smart-contract read-only call
enum SmartContractReadOnlyCallStatus {
  SMART_CONTRACT_READ_ONLY_CALL_STATUS_UNSPECIFIED = 0;
  SMART_CONTRACT_READ_ONLY_CALL_STATUS_FAILED = 1;
  SMART_CONTRACT_READ_ONLY_CALL_STATUS_SUCCEEDED = 2;
}

message SmartContractReadOnlyCallRequest {
  SmartContractFunctionCall call = 1;
}

message SmartContractReadOnlyCallResponse {
  SmartContractReadOnlyCallStatus status = 1;
  bytes result = 2;
}

// Get stake
message GetStakeRequest {
  string pool_address = 1;
  string account_address = 2;
}

message GetStakeResponse {
  string amount = 1;
}

//Create Account
message Account{
  string private_key = 1;
  string public_key = 2;
  string address = 3;
}

message CreateAccountRequest{
  string password = 1;
  string keystore_path = 2;
}

message CreateAccountResponse{
  Account account = 1;
}

//Import Account
message ImportAccountRequest{
  string password = 1;
  string private_key = 2;
  string keystore_path = 3;
}

message ImportAccountResponse{
  Account account = 1;
}

message GetNodeInfoRequest {}

message NodeInfo {
  bytes address = 1;
  string peer_id = 2;
  uint64 joined_epoch = 3;
  bytes ip_address = 4;
  bytes metadata = 5;
  bytes cluster_address = 6;
  bytes signature = 7;
  bytes verifying_key = 8;
}

message GetNodeInfoResponse {
  repeated NodeInfo node_info = 1;
}

message GetCurrentNodeInfoRequest {}

message CurrentNodeInfo {
  string address = 1;
  string peer_id = 2;
  string ip_address = 3;
}

message GetCurrentNodeInfoResponse {
  CurrentNodeInfo node_info = 1;
  string block_number = 2;
  string epoch = 3;
  string block_proposer = 4;
  repeated string validators = 5;
}

message GetGenesisBlockRequest {}

message GenesisBlock {
  int64 block_number = 1;
  int64 epoch = 2;
}

message GetGenesisBlockResponse {
  GenesisBlock genesis_block = 1;
}

message GetNodeHealthsRequest {
    uint64 epoch = 1;
}

message NodeHealth {
  string measured_peer_id = 1;
  string peer_id = 2;
  uint64 epoch = 3;
  uint64 joined_epoch = 4;
  double uptime_percentage = 5;
  uint64 response_time_ms = 6;
  uint64 transaction_count = 7;
  uint64 block_proposal_count = 8;
  double anomaly_score = 9;
  uint32 node_health_version = 10;
}

message GetNodeHealthsResponse {
  repeated NodeHealth node_healths = 1;
}

message BpForEpoch {
    uint64 epoch = 1;
    bytes bp_address = 2;
}

message GetBpForEpochRequest {
    uint64 epoch = 1;
}

message GetBpForEpochResponse {
  repeated BpForEpoch bp_for_epoch = 1;
}

message Validator {
    bytes address = 1;
    bytes cluster_address = 2;
    uint64 epoch = 3;
    string stake = 4;
    double xscore = 5;
}

message ValidatorsForEpoch {
    repeated Validator validators = 2;
}

message GetValidatorsForEpochRequest {
    uint64 epoch = 1;
}

message GetValidatorsForEpochResponse {
  repeated ValidatorsForEpoch validators_for_epochs = 1;
}

message NodePoolInfo {
    string node = 1;
    string staked_balance = 2;
    string locking_period = 3;
    string reward_wallet_address = 4;
    string min_pool_balance = 5;
    optional string min_pool_balance_from = 6;
    string max_pool_balance = 7;
    optional string max_pool_balance_from = 8;
}

message RuntimeStakingInfo {
    map<string, NodePoolInfo> nodes = 1;
    map<string, string> reward_node_map = 2;
}

message GetRuntimeStakingInfoRequest {}

message GetRuntimeStakingInfoResponse {
  RuntimeStakingInfo runtime_staking_info = 1;
}

message XscoreConfig {
    double xscore_threshold = 1;
    double weight_for_stakescore = 2;
    double weight_for_kinscore = 3;
}

message StakeScoreConfig {
    uint64 min_balance = 1;
    uint64 max_balance = 2;
    uint64 min_stake_age = 3;
    uint64 max_stake_age = 4;
    uint64 min_lock_period = 5;
    uint64 max_lock_period = 6;
    double weight_for_stake_balance_6 = 7;
    double weight_for_stake_age_6 = 8;
    double weight_for_locking_period_6 = 9;
    double weight_for_stake_balance_12 = 10;
    double weight_for_stake_age_12 = 11;
    double weight_for_locking_period_12 = 12;
    double weight_for_stake_balance_18 = 13;
    double weight_for_stake_age_18 = 14;
    double weight_for_locking_period_18 = 15;
}

message KinScoreConfig {
    double min_uptime = 1;
    double max_uptime = 2;
    uint32 min_participation = 3;
    uint32 max_participation = 4;
    uint64 min_response_time = 5;
    uint64 max_response_time = 6;
    double min_security_measure = 7;
    double max_security_measure = 8;
    double xscore_threshold = 9;
    double weight_for_uptime = 10;
    double weight_for_participation_history = 11;
    double weight_for_response_time = 12;
    double weight_for_security_measure = 13;
}

message ValidatorRewards {
    string validated_block_reward = 1;
}

message RuntimeConfig {
    repeated string org_nodes = 1;
    repeated string whitelisted_nodes = 2;
    repeated string whitelisted_block_proposers = 3;
    repeated string blacklisted_nodes = 4;
    repeated string blacklisted_block_proposers = 5;
    optional uint64 max_block_height = 6;
    uint64 max_validators = 7;
    XscoreConfig xscore = 8;
    StakeScoreConfig stake_score = 9;
    KinScoreConfig kin_score = 10;
    ValidatorRewards rewards = 11;
}

message GetRuntimeConfigRequest {}

message GetRuntimeConfigResponse {
  RuntimeConfig runtime_config = 1;
}

